#include <iostream>
#include <queue>
#include <vector>
#include <sstream>
#include <string>

using namespace std;

class node{
public:

	int weapons;
	int shots;
	
    node(int w, int s){weapons=w; shots=s;}
};

struct compare{
    bool operator() (const node &a, const node &b)
    {
        return a.shots > b.shots;
    }  
};


class KiloManX{
    
    bool topWeapons[32768];
    
    public:
    
    int leastShots(vector <string> damageChart, vector <int> bossHealth){
        priority_queue<node, vector<node>, compare> pq;
        pq.push(node(0,0));
        
        int n = bossHealth.size();
        
        while(!pq.empty()){
            node top = pq.top();
            pq.pop();
            
            //cout << "Top "<<top.weapons << " "<<top.shots<<" Top ";
            if(top.weapons == ((1 << n) - 1))
                return top.shots;
            
            if(topWeapons[top.weapons]) continue;
            
            topWeapons[top.weapons] = true;
            
            for(int i =0;i<damageChart.size();i++){
                
                if((top.weapons >> i) & 1) continue;
                
                int best=bossHealth[i];
                
                for(int j =0; j< damageChart.size(); j++){
                    if(i==j) continue;
                    
                    if(((top.weapons >> j) & 1) && damageChart[j][i] != '0'){
                        int shotsNeeded = bossHealth[i] / (damageChart[j][i] - '0');
                        if (bossHealth[i] % (damageChart[j][i] - '0')) shotsNeeded++;
                        best = min(best, shotsNeeded);
                    }
                }
                
                pq.push(node(top.weapons | (1 << i), top.shots+best));
               // cout << (top.weapons | (1 << i)) <<" "<<top.shots+best<<" ";
            }
            
        }
        
        return -1;
    }
    
};
