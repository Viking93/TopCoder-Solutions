#include <iostream>
#include <algorithm>
#include <sstream>
#include <vector>
#include <queue>

using namespace std;

class node{
    public:
    int x1,y1,x2,y2;
    int steps;
    
    node(int a, int b, int c, int d, int s){
        x1=a;
        y1=b;
        x2=c;
        y2=d;
        steps=s;
    }
};

class PathFinding {
    bool path[20][20];
    bool visit[20][20][20][20];
//    bool visitB[20][20];
    
    public:
    
    void init(){
        for(int i =0; i < 20;i ++)
            for(int j=0;j<20; j++){
            	path[i][j]=false;
            	for(int k =0;k < 20;k++)
                    for(int l=0;l<20;l++)
                    	visit[i][j][k][l]=false;
        }
    }
    
    int bfs(node s, int h, int b){
        queue<node> q;
        q.push(s);
        visit[s.x1][s.y1][s.x2][s.y2]=true;
        
        while(!q.empty()){
            node t = q.front();
            q.pop();
            
            //cout << "vickey";
           // if(t.x1 < 0 || t.x1 >= l || t.y1 < 0 || t.y1 >= b) continue;
            //if(t.x2 < 0 || t.x2 >= l || t.y2 < 0 || t.y2 >= b) continue;
            
            //cout <<t.x1<<" "<<t.y1<<" "<<t.x2<<" "<<t.y2<<"  "<<t.steps<<"      ";
                
            if(t.x1 == s.x2 && t.x2 == s.x1 && t.y1 == s.y2 && t.y2 == s.y1)
            {
                //cout<<t.x1<<" "<<t.y1<<" "<<t.x2<<" "<<t.y2<<" ";
                return t.steps;}
           
                for(int i = -1; i <= 1; i++)
                    for(int j = -1 ; j<= 1; j++)
                    	for(int k = -1 ; k<=1; k++)
                    		for(int l = -1; l<=1; l++){
                    			
                    if((t.x1+i == t.x2 && t.x2+k == t.x1 && t.y1+j == t.y2 && t.y2 + l == t.y1) ||
                      (t.x1+i == t.x2+k && t.y1+j == t.y2 + l)) continue;
                    if(t.x1+i < 0 || t.x1+i >= h || t.y1+j < 0 || t.y1+j >= b) continue;
		            if(t.x2+k < 0 || t.x2+k >= h || t.y2+l < 0 || t.y2+l >= b) continue;
                    if(!(path[t.x1+i][t.y1+j] && path[t.x2+k][t.y2+l])) continue;
                    
                 // cout <<t.x1+i<<" "<<t.y1+j<<" "<<t.x2+k<<" "<<t.y2+l<<" ";
                    if(!visit[t.x1+i][t.y1+j][t.x2+k][t.y2+l]){
                        visit[t.x1+i][t.y1+j][t.x2+k][t.y2+l]=true;
                       // cout <<t.x1+i<<" "<<t.y1+j<<" "<<t.x2+k<<" "<<t.y2+l<<" ";
                    	q.push(node(t.x1+i,t.y1+j,t.x2+k,t.y2+l,t.steps+1));
                    }
                  
                }
        }
        
        return -1;
    }
    
     int minTurns(vector <string> board){
         int x1=0,y1=0,x2=0,y2=0;
         int n=0;
         
         for(int i = 0; i < board.size(); i++){
             istringstream in(board[i]);
             string token;
             in>>token;
             n = token.size();
             for(int j = 0; j < token.size(); j++){
                 if(token[j] == '.')
                 	path[i][j]=true;
                 else if(token[j] == 'A'){
                 	path[i][j]=true;
                 	x1=i;
                 	y1=j;
                 }
             	else if(token[j] == 'B'){
                    path[i][j]=true;
                 	x2=i;
                 	y2=j;
                }
             }

         }
             	
         return bfs(node(x1,y1,x2,y2,0), board.size(), n);
         
     }
};
